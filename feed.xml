<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julien Guittard</title>
    <description>Hi, I'm Julien Guittard, welcome to my personal website. I am a web application architect and trainer.</description>
    <link>http://julien.guittard.io/</link>
    <atom:link href="http://julien.guittard.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 29 Jan 2018 10:54:34 -0400</pubDate>
    <lastBuildDate>Mon, 29 Jan 2018 10:54:34 -0400</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>PSR-7 Request and Method Utilities</title>
        <description>&lt;p&gt;We all know the standard HTTP request methods and status codes, right? Or do we?&lt;/p&gt;

&lt;p&gt;We definitely know whether or not they should be integers or strings, and/or how
string values should be normalized, right?&lt;/p&gt;

&lt;p&gt;And our IDEs can &lt;em&gt;totally&lt;/em&gt; autocomplete them, right?&lt;/p&gt;

&lt;p&gt;Oh, that’s not the case?&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;p&gt;Some time ago, a few folks floated the idea of creating a utility repository
related to the &lt;a href=&quot;http://www.php-fig.org/psr/psr-7/&quot;&gt;PSR-7&lt;/a&gt;
&lt;a href=&quot;https://github.com/php-fig/http-message&quot;&gt;psr/http-message&lt;/a&gt; package, but
containing some useful bits such as constants for HTTP request methods and
status codes.&lt;/p&gt;

&lt;p&gt;Six months ago, we released it… but didn’t publicize it. I remembered that
fact today while writing some unit tests that were utilizing the package, and
thought I’d finally write it up.&lt;/p&gt;

&lt;p&gt;The package is &lt;a href=&quot;https://github.com/php-fig/http-message-util&quot;&gt;fig/http-message-util&lt;/a&gt;,
and is available via Composer and Packagist:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer require fig/http-message-util
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It provides two interfaces:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fig\Http\Message\RequestMethodInterface&lt;/code&gt;, containing constants for HTTP
request method values.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fig\Http\Message\StatusCodeInterface&lt;/code&gt;, containing constants for HTTP status
code values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The constants are prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;METHOD_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;STATUS_&lt;/code&gt;, respectively, and use
the standard names as presented in the various IETF specifications that
originally define them.&lt;/p&gt;

&lt;p&gt;As an example, I could write middleware that looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Fig\Http\Message\RequestMethodInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Fig\Http\Message\StatusCodeInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Interop\Http\ServerMiddleware\DelegateInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Interop\Http\ServerMiddleware\MiddlewareInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Psr\Http\Message\ServerRequestInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend\Diactoros\EmptyResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMethodNegotiation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MiddlewareInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$alwaysAllowed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD_HEAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD_OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ServerRequestInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DelegateInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alwaysAllowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Always allowed
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// In map; proceed
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Not allowed!
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EmptyResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATUS_METHOD_NOT_ALLOWED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'Allow'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;implode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The things to notice in the above are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$alwaysAllowed&lt;/code&gt; uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;RequestMethodInterface&lt;/code&gt; constants in order to
provide a list of always allowed HTTP methods; it doesn’t use strings, which
are prone to typos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When a dis-allowed method is encountered, we use a &lt;code class=&quot;highlighter-rouge&quot;&gt;StatusCodeInterface&lt;/code&gt;
constant to provide the status. This allows us to use code completion,
but also signify the &lt;em&gt;intent&lt;/em&gt; of the code. Integer values are great, but
unless you have all the status codes memorized, it’s often easy to forget
what they &lt;em&gt;mean&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other thing to notice is that I alias the interfaces to shorter names.
We require interfaces to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt; suffix in FIG, but in situations
like these, I don’t particularly care that the constants are defined in an
&lt;em&gt;interface&lt;/em&gt;; I just want to consume them. This is one of the reasons PHP
supports aliasing.&lt;/p&gt;

&lt;p&gt;If you’re not already using this package, and use PSR-7 middleware, I highly
recommend checking the package out!&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/psr-7-request-and-method-utilities.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/psr-7-request-and-method-utilities.html</guid>
        
        <category>php</category>
        
        <category>programming</category>
        
        <category>psr-7</category>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Push-to-Deploy with AWS CodeDeploy</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/codedeploy/&quot;&gt;AWS CodeDeploy&lt;/a&gt; is a tool for automating
application deployments to EC2 instances and clusters. It can pull application
archives from either S3 or GitHub, and then allows you to specify how to
install, configure, and run the application via a configuration specification
and optionally hook scripts. When setup correctly, it can provide a powerful way
to automate your deployments.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;p&gt;I started looking into it because I wanted to try out my site on PHP 7, and do a
few new things with nginx that I wasn’t doing before. Additionally, I’ve
accidently forgotten to deploy a few times in the past year after writing a blog
post, and I wanted to see if I solve that situation; I’d really enjoyed the
“push-to-deploy” paradigm of OpenShift and EngineYard in the past, and wanted to
see if I could recreate it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zimuel.it&quot;&gt;Enrico&lt;/a&gt; first pointed me to the service, and I was later
&lt;a href=&quot;https://docs.google.com/presentation/d/19r3BCzBmFViJP3YHisn4miJBz2Oq0EH4bbpVDhjWZXQ/edit&quot;&gt;inspired by a slide deck by Ric Harvey&lt;/a&gt;.
The process wasn’t easy, due to a number of things that are not documented or
not fully documented in the AWS CodeDeploy documentation, but in the end, I was
able to accomplish exactly that: push-to-deploy. This post details what I found,
some recommendations on how to create your deployments, and ways to avoid some
of the pitfalls I fell into.&lt;/p&gt;

&lt;h2 id=&quot;preparing-for-codedeploy-on-aws&quot;&gt;Preparing for CodeDeploy on AWS&lt;/h2&gt;

&lt;p&gt;The first thing you need to do is setup a whole slew of profiles, roles, and
policies on AWS.  The
&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-setup.html&quot;&gt;AWS CodeDeploy Getting Started guide&lt;/a&gt;
walks you through the various details of that. While it’s not trivial or easy,
I was able to get everything ready without any real stumbling blocks.&lt;/p&gt;

&lt;h2 id=&quot;create-an-ec2-instance&quot;&gt;Create an EC2 instance&lt;/h2&gt;

&lt;p&gt;Once you’ve setup your IAM (Identity and Access Management) profiles, roles, and
policies, you can start enabling CodeDeploy on your EC2 instances. While you can
assign an IAM policy to an existing EC2 instance, I recommend using a new
instance, to ensure that you can troubleshoot and debug without affecting a
running application.&lt;/p&gt;

&lt;p&gt;I went and selected an Ubuntu 16.04 AMI (specifically, ami-32b6515f), as I want
to use the latest LTS, and I’m familiar with both Ubuntu and Debian systems.
(This turned out to pose a few issues, which I’ll detail later.)&lt;/p&gt;

&lt;p&gt;When I created the instance, I tied it to the IAM policy I created for
CodeDeploy, ensuring I’ll be able to use it with that service.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-ec2-instance&quot;&gt;Setting up the EC2 instance&lt;/h2&gt;

&lt;p&gt;If you don’t install the official Amazon Linux AMI, you won’t have the various
tools in place needed to run the CodeDeploy agent. Among other things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The www-data user is setup such that it cannot use a shell, which means it
cannot run scripts — which poses a problem for running deployment scripts or
cronjobs as the user.&lt;/li&gt;
  &lt;li&gt;You need to install the CodeDeploy agent on the instance, and it may need
some dependencies installed depending on the AMI you use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;www-data&quot;&gt;www-data&lt;/h3&gt;

&lt;p&gt;The www-data user exists by default. However, it has the login shell set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/sbin/nologin&lt;/code&gt;. This means that if you specify:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in one of your &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt; hooks, it will fail; this also affects execution of
crontab entries. The solution is to update the user to have a real login shell.
Run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vipw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vipw&lt;/code&gt; is a safer way to edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; file, and will prompt you for an
editor to use before opening it. Find the entry for &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt;, change the shell
to &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;, save, and exit.&lt;/p&gt;

&lt;h3 id=&quot;ruby-20&quot;&gt;Ruby 2.0&lt;/h3&gt;

&lt;p&gt;In order to install the code deploy agent on the server, you need to have ruby
2.0 installed; the installer for the agent will not work with any other version
at this time.&lt;/p&gt;

&lt;p&gt;If you’re on Ubuntu 14.04, or if you’re on the official Amazon Linux AMI, it’s
already installed, or can be installed from existing package repositories:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# On Ubuntu 14.04:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install ruby2.0
&lt;span class=&quot;c&quot;&gt;# On Amazon Linux or Fedora:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum install ruby2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If, like me, you decide to use Ubuntu 16.04 (xenial), that version is
unavailable (the lowest version available is 2.3), and even some well-known
package repositories do not have xenial packages available (if they ever will).&lt;/p&gt;

&lt;p&gt;So, I had to create a package, which involves downloading a 2.0 release, using a
utility to create a debian package out of it, and then installing it.&lt;/p&gt;

&lt;p&gt;To do that, I did the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install checkinstall build-essential zlib1g-dev libssl-dev libreadline6-dev libyaml-dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p481.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf ruby-2.0.0-p481.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ruby-2.0.0-p481
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;checkinstall &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;checkinstall&lt;/code&gt; runs, it will prompt you for a few things:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The package documentation directory ./doc-pak does not exist.
Should I create a default set of package docs? [y]:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Answer “y”.&lt;/p&gt;

&lt;p&gt;It then asks for a description; I used “Ruby 2.0 interpreter”.&lt;/p&gt;

&lt;p&gt;At this point, it shows you what values the package will be built with. Time to
change a few.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change the Name (option 2) to “ruby2.0”&lt;/li&gt;
  &lt;li&gt;Change the Version (option 3) to “2.0.0-p481”&lt;/li&gt;
  &lt;li&gt;Change the Requires list (option 10) to read: build-essential,zlib1g-dev,libssl-dev,libreadline6-dev,libyaml-dev&lt;/li&gt;
  &lt;li&gt;Change the Provides list (option 11) to read: ruby-interpreter,ruby-interpreter:any,ruby-interpreter:i386,ruby2.0:any&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once done, hit ENTER.&lt;/p&gt;

&lt;p&gt;This builds the package in the current directory as
&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby2.0_2.0.0-p481-1_amd64.deb&lt;/code&gt;, which you can then install with &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg -i&lt;/code&gt;,
and later remove with &lt;code class=&quot;highlighter-rouge&quot;&gt;dpkg -r ruby2.0&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The package metadata values are important. Without them, the agent may or may
not be able to identify that a usable ruby version is installed on the system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;codedeploy-agent&quot;&gt;CodeDeploy Agent&lt;/h3&gt;

&lt;p&gt;To install the code deploy agent, you need to know what region you’re in. From
there, you do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir code-deploy-agent
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;code-deploy-agent
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://aws-codedeploy-&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;region name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.s3.amazonaws.com/latest/install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chmod +x ./install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./install auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have my EC2 instance launched in us-east-1, so the above url became
&lt;code class=&quot;highlighter-rouge&quot;&gt;https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install&lt;/code&gt;.
(See the &lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-run-agent-install.html&quot;&gt;documentation on installing the agent&lt;/a&gt;
for valid S3 bucket values for the installer, as not all regions are
represented.)&lt;/p&gt;

&lt;p&gt;If you have installed the dependencies as listed above, all should go well. From
there, check to see if it’s running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service codedeploy-agent status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it’s not running, start it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service codedeploy-agent start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-your-deployment&quot;&gt;Creating your deployment&lt;/h2&gt;

&lt;p&gt;I found that, in the end, PHP application deployment was quite easy with
CodeDeploy, but that due to oddities in the &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt; rules, as well as in
where and how event hooks scripts are executed, the documentation often failed
me. As such, this is probably the most important section of this narrative.&lt;/p&gt;

&lt;p&gt;A basic &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt; has the following structure:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;linux&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;directory&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ApplicationStop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/application-stop.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;BeforeInstall&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/before-install.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AfterInstall&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/after-install-www-data.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/after-install-root.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ApplicationStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/application-start.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s talk about each of the sections.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;Files&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; allows you to specify which files from your archive should be
installed, and their destination on the filesystem. Each entry requires a
&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;, which will be a path relative to the archive, and a &lt;code class=&quot;highlighter-rouge&quot;&gt;destination&lt;/code&gt;,
which will be its destination on the server.&lt;/p&gt;

&lt;p&gt;If you specify &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt; for Windows instances), CodeDeploy will copy the
entire archive. I’ve found this is typically easiest, as the &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt;
specification &lt;em&gt;does not provide wildcard functionality&lt;/em&gt;, nor any
whitelist/blacklist functionality. Yes, you can specify directories or files,
but once you go that route, if you have more than a handful, the specification
gets unwieldy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One tip I read early on was to ship the deployable code within a
subdirectory of the archive. This is similar to how Zend Server’s ZPK format
expects things as well, but it’s pretty much counter to every PHP framework
skeleton or application I’ve used or seen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One thing to know: this does not work like Unix &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;. With those
utilities, if the source is a file and you specify a destination path that does
not exist, they will create it as a file. However, CodeDeploy does not. As an
example, consider the following:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/crontab&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/spool/cron/crontabs/www-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/spool/cron/crontabs&lt;/code&gt; is a directory, if I were using &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;,
I’d expect this operation to create the file
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/spool/cron/crontabs/www-data&lt;/code&gt;. Instead, because the source name and
destination name do not match, CodeDeploy creates that as a &lt;em&gt;directory&lt;/em&gt;, and
then copies the file &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; beneath it, giving us the file
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/spool/cron/crontabs/www-data/crontab&lt;/code&gt;. Which is utterly unusable. (There
are ways around it via hook scripts, which I’ll detail later.)&lt;/p&gt;

&lt;p&gt;Another thing to keep in mind: when providing a source &lt;em&gt;directory&lt;/em&gt;, CodeDeploy
copies all files under it, recursively, to the destination. If the destination
does not include the source directory name, you’ll be in for a surprise:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will copy all the files under &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; to the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/example.com&lt;/code&gt;. It
&lt;em&gt;will not&lt;/em&gt; create a &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/&lt;/code&gt; directory under that path! As such, you likely want
to use:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com/bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For these reasons, I found it was far easier to just copy the entire archive.&lt;/p&gt;

&lt;h3 id=&quot;permissions&quot;&gt;Permissions&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;permissions&lt;/code&gt; section allows you to specify permissions for individual files
or trees on the server. These are applied during the Install event, after all
files have been deployed to their location.&lt;/p&gt;

&lt;p&gt;The format is:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4755&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;directory&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can specify individual files or directories for the &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;. directories
require a &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern&lt;/code&gt; following them, which allows you to provide a POSIX glob for
specifying files and directories to which to apply the permissions; &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;
indicates it should match everything under the tree.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; parameter allows you to specify whether the permissions
apply to specifically directories or files; you can specify both at the same
time if desired.&lt;/p&gt;

&lt;p&gt;The owner, group, and mode arguments are just as you would use for either
&lt;code class=&quot;highlighter-rouge&quot;&gt;chown&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;chgrp&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The above will likely work for most cases. I broke that into two separate
statements, one for applying to directories, another for files:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4750&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;directory&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/www/example.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;**&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;640&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a fair amount more you can do; read the
&lt;a href=&quot;http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref-permissions.html&quot;&gt;appspec.yml permissions documentation&lt;/a&gt;
for more details.&lt;/p&gt;

&lt;h3 id=&quot;hooks&quot;&gt;Hooks&lt;/h3&gt;

&lt;p&gt;Hooks allow you to specify scripts to run during each of the CodeDeploy events.
There are five events you can listen to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ApplicationStop, which occurs at the start of a deployment operation.&lt;/li&gt;
  &lt;li&gt;BeforeInstall, which occurs before any &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt;
are deployed to their destinations.&lt;/li&gt;
  &lt;li&gt;AfterInstall, which occurs after files have been deployed.&lt;/li&gt;
  &lt;li&gt;ApplicationStart, which happens after installation is complete&lt;/li&gt;
  &lt;li&gt;ValidateService, which happens after the application has been started.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are actually a few other events, but only the above can trigger hook
scripts.&lt;/p&gt;

&lt;p&gt;As noted in the sample &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt;, the various hook sections have the
following format:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;event name&amp;gt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;path to script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;timeout in seconds&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;user to run script as&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only required element is the &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; field, which is the script to
execute. The &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; can be used to help ensure that scripts that take too long
to execute fail the deployment, allowing you to return to the previous
deployment. The &lt;code class=&quot;highlighter-rouge&quot;&gt;runas&lt;/code&gt; is used to specify a user to execute the script under,
and defualts to root; I like to specify it explicitly, and some scripts may need
to run under different users (in particular, the www-data user).&lt;/p&gt;

&lt;p&gt;Now come the various caveats and recommendations.&lt;/p&gt;

&lt;p&gt;First things first: I put all the various files related to deployment on AWS in
a dedicated directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws/&lt;/code&gt;. This allows me to have it all in one place, and
segregate it from the rest of my application.&lt;/p&gt;

&lt;p&gt;Second: I strongly recommend creating a script named after the event
in which it executes; e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;after-install.sh&lt;/code&gt;. This makes identifing which
script to edit and debug far simpler. If the script needs to be run as a
specific user, I include that in the script name as well:
&lt;code class=&quot;highlighter-rouge&quot;&gt;after-install-www-data.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Third, the “deployment directory” is not the same as the “installation
directory”. The &lt;em&gt;deployment directory&lt;/em&gt; is where CodeDeploy downloads your code
(whether from GitHub or S3). During the Install event, it &lt;em&gt;copies&lt;/em&gt; code from
that directory into the final destination (per your &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt; “Files”
rules). However, Install &lt;em&gt;will only copy directories that were part of the
original archive&lt;/em&gt;. That means any files you generate &lt;em&gt;will not be part of the
installation directory&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Fourth, hook script &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; values &lt;em&gt;are always relative to the deployment
directory&lt;/em&gt;. Not the installation directory. In fact, even &lt;em&gt;fully qualified
paths&lt;/em&gt; are interpreted as if they were relative to the deployment directory,
which means system tools cannot be called directly! As such, you’ll need to make
those calls to system tools &lt;em&gt;within a hook script&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ApplicationStop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/application-stop.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;BeforeInstall&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/before-install.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;AfterInstall&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/after-install-www-data.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www-data&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/after-install-root.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ApplicationStart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.aws/application-start.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;system-dependencies&quot;&gt;System dependencies&lt;/h4&gt;

&lt;p&gt;One cool thing about CodeDeploy is that, other than the requirements to allow
the CodeDeploy agent to run and ensuring www-data has a login shell, you can
assume that deployment will take care of the everything else for you, much as
you would when using Ansible, Puppet, Chef, or Docker.&lt;/p&gt;

&lt;p&gt;The idea is this: during the BeforeInstall event, you will check for and install
system dependencies, create directories and configuration, etc.&lt;/p&gt;

&lt;p&gt;One nice aspect about this approach is that if your system requirements change —
for example, if you decide to switch between grunt and gulp for preparing your
frontend assets — you can alter your hook script to add the new requirement,
and it will be installed on the next deployment.&lt;/p&gt;

&lt;p&gt;I wrote one script to handle all of this for my site:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System dependencies&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install needed dependencies&lt;/span&gt;
apt-get update
apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nginx php7.0 php7.0-bcmath php7.0-bz2 php7.0-cli php7.0-ctype php7.0-curl php7.0-dom php7.0-fileinfo php7.0-fpm php7.0-gd php7.0-iconv php7.0-intl php7.0-json php7.0-mbstring php7.0-pdo php7.0-pdo-sqlite php7.0-phar php7.0-readline php7.0-simplexml php7.0-sockets php7.0-sqlite3 php7.0-tidy php7.0-tokenizer php7.0-xml php7.0-xsl php7.0-xmlreader php7.0-xmlwriter php7.0-zip npm python3-pip

&lt;span class=&quot;c&quot;&gt;# aws cli&lt;/span&gt;
pip3 install awscli

&lt;span class=&quot;c&quot;&gt;# Get Composer, and install to /usr/local/bin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/bin/composer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;php &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;&lt;/span&gt;
    php &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;if (hash_file('SHA384', 'composer-setup.php') === 'e115a8dc7871f15d853148a7fbac7da27d6c0030b848d9b3dc09e2a0388afed865e6a3d6b3c0fad45c48e2b5fc1196ae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;&lt;/span&gt;
    php composer-setup.php &lt;span class=&quot;nt&quot;&gt;--install-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin &lt;span class=&quot;nt&quot;&gt;--filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;composer
    php &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unlink('composer-setup.php');&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    /usr/local/bin/composer self-update &lt;span class=&quot;nt&quot;&gt;--stable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-ansi&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-interaction&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a COMPOSER_HOME directory for the application&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/cache/composer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/cache/composer
    chown www-data.www-data /var/cache/composer
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get private configuration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/www/config&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/www/config
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/config &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws s3 sync s3://config.example.com .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make a log directory for php-fpm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/php&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/php
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; www-data.www-data /var/log/php
chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; ug+rwX /var/log/php

&lt;span class=&quot;c&quot;&gt;# Install grunt globally&lt;/span&gt;
npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; grunt-cli

&lt;span class=&quot;c&quot;&gt;# Ensure we can run npm as www-data&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/www/.npm&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/www/.npm
    chown www-data.www-data /var/www/.npm
    chmod o-X /var/www/.npm
    chmod ug+rwX /var/www/.npm
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I do some &lt;em&gt;conditional&lt;/em&gt; installation as well; if certain files
or directories exist, I can skip over them or treat them differently. In the
case of running &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, I know that these applications will
check to see if the latest version is installed before attempting to do
anything, making these very fast operations most of the time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some notes on a few items in there:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPOSER_HOME&lt;/code&gt; directory as composer requires a place to cache
the results of pulling information from Packagist, as well as packages it
has downloaded. Since the www-data user doesn’t have rights to create files
or directories under &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www&lt;/code&gt;, we need to create a directory for it to
use.&lt;/li&gt;
    &lt;li&gt;Similarly, npm caches to &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.npm&lt;/code&gt;. If there’s a way to specify an
alternate directory, I’ve not found it yet. As such, I create the directory
here, if it doesn’t exist, and make sure the www-data user has ownership of
it.&lt;/li&gt;
    &lt;li&gt;I want to be able to log my PHP errors, so I create a log directory for PHP,
and, again, make sure www-data can write to it.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, BeforeInstall is when I can make sure the system is ready to run my
application once installation completes.&lt;/p&gt;

&lt;h4 id=&quot;private-configuration&quot;&gt;Private configuration&lt;/h4&gt;

&lt;p&gt;One other thing to note in that script is the usage of the AWS CLI to pull some
files from S3:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Get private configuration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/www/config&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/www/config
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/config &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; aws s3 sync s3://config.example.com .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I’ve done here is stored production configuration settings and SSL
certificates in a private bucket on S3. Because the AWS CLI needs appropriate
credentials to access the bucket (and if you’re on an EC2 instance, it inherits
credentials based on the instance policy), this is a safe operation, ensuring I
have that data stored securely, and not in my git repository. I currently store
my application production configuration there, as well as my SSL certificates.
The lines above pull them from the bucket when I’m preparing to deploy, ensuring
I have the latest production-ready versions.&lt;/p&gt;

&lt;h4 id=&quot;application-preparation&quot;&gt;Application preparation&lt;/h4&gt;

&lt;p&gt;With a PHP application, we likely want to wait to do anything until after our
files have been moved to their installation directory. Why?&lt;/p&gt;

&lt;p&gt;There are two reasons: location, and install quirks.&lt;/p&gt;

&lt;p&gt;The first is that hook scripts appear to run with a working directory of
&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/codedeploy-agent&lt;/code&gt;, and not the deployment directory. When I tested,
&lt;code class=&quot;highlighter-rouge&quot;&gt;composer install&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; both failed, due to being unable to locate
their respective configuration… because they were running under
&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/codedeploy-agent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can, of course, figure out the current working directory from within bash
with a few hurdles, and I tried that to make things work. However, that unveiled
another issue: &lt;em&gt;CodeDeploy will only move directories that were originally part
of the archive&lt;/em&gt;. So, if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;composer install&lt;/code&gt; within a &lt;code class=&quot;highlighter-rouge&quot;&gt;BeforeInstall&lt;/code&gt;
script, the &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor/&lt;/code&gt; directory does not get moved to the installation
directory.&lt;/p&gt;

&lt;p&gt;As such, for most PHP projects, you’ll need to use an AfterInstall script to
do your work. Moreover, you’ll need to have the script change the working
directory to the installation directory.&lt;/p&gt;

&lt;p&gt;So, as an example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Application preparation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/example.com &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Copy in the production local configuration&lt;/span&gt;
    cp /var/www/config/php/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; config/autoload/ &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Execute a composer installation&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;COMPOSER_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/cache/composer composer install &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-ansi&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-dev&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-interaction&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-scripts&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-plugins&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--optimize-autoloader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Execute other scripts as needed ...&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Compile CSS and JS&lt;/span&gt;
    npm install &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    grunt &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    rm &lt;span class=&quot;nt&quot;&gt;-Rf&lt;/span&gt; node_modules &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I copy my production configuration that I synced from S3 into my application.&lt;/li&gt;
  &lt;li&gt;I run Composer to install dependencies. Notice that I specify the composer
cache directory I setup in by BeforeInstall script as the &lt;code class=&quot;highlighter-rouge&quot;&gt;COMPOSER_HOME&lt;/code&gt;!&lt;/li&gt;
  &lt;li&gt;If I have other deployment/build tasks, I can run those.&lt;/li&gt;
  &lt;li&gt;In my case, I’m using grunt to aggregate and minimize CSS and JS assets, so I
run that, and then clean-up after myself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big thing to note is this construct:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/www/example.com &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# tasks..&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since this runs AfterInstall, I know the destination directory is ready, and I
run my deployment operations there. The script itself, however, &lt;em&gt;is still being
run from the CodeDeploy agent deployment directory&lt;/em&gt;, which is why I need to
change directories within my script.&lt;/p&gt;

&lt;h4 id=&quot;system-configuration&quot;&gt;System configuration&lt;/h4&gt;

&lt;p&gt;Now that the application has been prepared, we can update the system.&lt;/p&gt;

&lt;p&gt;Some aspects of web applications that might change from one deployment to the
next:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crontabs&lt;/li&gt;
  &lt;li&gt;SSL configuration&lt;/li&gt;
  &lt;li&gt;Web server configuration&lt;/li&gt;
  &lt;li&gt;PHP configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You likely won’t want to update these, however, unless everything else during
deployment has succeeded, so we do this &lt;em&gt;last&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my system configuration script, &lt;code class=&quot;highlighter-rouge&quot;&gt;after-install-root.sh&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# System preparation following successful application installation.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#######################################################################&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; dirname &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CRONTAB_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/spool/cron/crontabs/www-data

&lt;span class=&quot;c&quot;&gt;# Setup www-data crontab&lt;/span&gt;
cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/crontab &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CRONTAB_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chown www-data.crontab &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CRONTAB_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 600 &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CRONTAB_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Bring in the SSL configuration and prep it&lt;/span&gt;
mv /var/www/config/ssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /etc/ssl/
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/ssl &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;example.com.crt example.com.ca-bundle &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; example.com.chained.crt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy nginx configuration&lt;/span&gt;
cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/mwop.net.conf /etc/nginx/sites-available/
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/nginx/sites-enabled/example.com.conf&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ../sites-available/example.com.conf .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy php configuration for php-fpm process&lt;/span&gt;
cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/php.ini /etc/php/7.0/fpm/conf.d/example.com.ini
cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/php-fpm.conf /etc/php/7.0/fpm/pool.d/www.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, this script runs in the context of the deployment directory, not the
installation destination directory. Further, we need to copy files from it to
various locations on the server, as well as from the files we downloaded via S3.&lt;/p&gt;

&lt;p&gt;Crontabs have to be owned by the user, and the crontab group, and named after
the user; I’d have loved to have been able to do this via the &lt;code class=&quot;highlighter-rouge&quot;&gt;appspec.yml&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; configuration, but never found a combination that worked; as such, I do
it here in the hook script.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The above example assumes you’ve put some configuration files in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.aws/&lt;/code&gt;
directory:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php.ini&lt;/code&gt;, with my production PHP settings.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;php-fpm.conf&lt;/code&gt;, with my production PHP-FPM configuration.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com.conf&lt;/code&gt;, with my production nginx settings.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I don’t detail what these files contain, as that will vary quite a bit between
applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea with this AfterInstall script is to ensure that we have appropriate
server configuration to execute the current state of our application.&lt;/p&gt;

&lt;h4 id=&quot;application-start-and-stop&quot;&gt;Application start and stop&lt;/h4&gt;

&lt;p&gt;Remember when I mentioned earlier that all hook script &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; entries are
relative to the deployment directory? This is where that information comes in.&lt;/p&gt;

&lt;p&gt;When we start deployment, we need to stop any services we may be updating. For a
PHP application, this is likely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The web server.&lt;/li&gt;
  &lt;li&gt;If you’re using php-fpm, then php-fpm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I originally tried this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ApplicationStop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service nginx stop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service php7.0-fpm stop&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;runas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, CodeDeploy was trying to resolve those as something along the lines of
&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/codedeploy-agent/deployment/{some-uuid}/{deployment-id}/archive/service&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the trick is to do those calls within a hook script you have in your
repository. For example:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
service nginx stop
service php7.0-fpm stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, we want to bring the services back up during ApplicationStart:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
service php7.0-fpm start
service nginx start
service cron restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(I also restart cron after installing the new crontab for www-data.)&lt;/p&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;The first time you deploy, you’ll need to do it manually. Assuming you have
installed and properly configured the AWS CLI on your own machine, and have
setup CodeDeploy, you can do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;aws deploy create-deployment &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--application-name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;application-name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--deployment-group-name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;deployment-group-name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--deployment-config-name&lt;/span&gt; CodeDeployDefault.OneAtATime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-application-stop-failures&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--github-location&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;user or org&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;repo&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,commitId&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;sha1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fill in all bracketed items with appropriate values.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One thing to note from the original &lt;code class=&quot;highlighter-rouge&quot;&gt;create-deployment&lt;/code&gt; command: the
&lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore--application-stop-failures&lt;/code&gt; flag. This flag is necessary to ensure
that deployment can continue if your ApplicationStop script fails. Why would
you want this? Well, recall that we use BeforeInstall to setup our system
dependencies. On our first execution, or on any execution where we add new
services to start and stop, &lt;em&gt;you may have services that do not yet exist&lt;/em&gt;.
The point of the deployment is to install those! As such, use that flag!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will give you a JSON payload like the following:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deploymentId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d-XXXXXXXXXX&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can then check the status using:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;aws deploy get-deployment &lt;span class=&quot;nt&quot;&gt;--deployment-id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;deploymentId&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deploymentInfo.[status,creator]&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check that periodically, or pass it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; command to determine
the status. If all goes well, you’ll see a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;status&quot;: &quot;Succeeded&quot;&lt;/code&gt; message.&lt;/p&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;

&lt;p&gt;If and/or when it fails, you have a couple places you can look.&lt;/p&gt;

&lt;p&gt;If you go to the &lt;a href=&quot;https://console.aws.amazon.com/codedeploy/home&quot;&gt;CodeDeploy console on AWS&lt;/a&gt;,
you can drill down into your application and see the deployments. When a
deployment fails, you’ll see a link to the deployment ID, which will take you an
overview showing the instances to which it attempted to deploy. Each instance
has a “View Events” link, which brings you to an overview of the events, and any
failed events will have a link to logs.&lt;/p&gt;

&lt;p&gt;You can also SSH to your server, and go to
&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/codedeploy-agent/deployment-root/{some uuid}/&lt;/code&gt;. Do an &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -ltr | tail -n1&lt;/code&gt; to find
the latest deployment ID, and then descend into it. In that directory, you can
then do a &lt;code class=&quot;highlighter-rouge&quot;&gt;less logs/scripts.log&lt;/code&gt;, and usually discover what the error is. (This
was how I discovered the issues with where and how the hook scripts are
executed, as well as the issues with Composer and npm that I ended up working
around.)&lt;/p&gt;

&lt;h2 id=&quot;automation&quot;&gt;Automation&lt;/h2&gt;

&lt;p&gt;AWS has an official AWS CodeDeploy webhook for GitHub that can be used along
with the GitHub Auto-Deployment webhook. Once you have confirmed that you can
create successful deployments, you can wire these up.&lt;/p&gt;

&lt;p&gt;The AWS blog has &lt;a href=&quot;https://blogs.aws.amazon.com/application-management/post/Tx33XKAKURCCW83/Automatically-Deploy-from-GitHub-Using-AWS-CodeDeploy&quot;&gt;an excellent guide to setting up autodeployment&lt;/a&gt;;
I have nothing I can add to that. I followed the instructions once I had a
working deployment, and it all &lt;em&gt;just worked&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;AWS CodeDeploy is quite powerful, and, once you understand its quirks, is a
solid approach to deployment; it essentially allows you to create a custom PaaS
for your application with “push to deploy”, and ensures that each deployment is
setup based on the current production requirements.&lt;/p&gt;

&lt;p&gt;While this post detailed using a single EC2 node, you can also setup multiple
instances under the same policy; when CodeDeploy triggers a deployment, it will
only succeed once all nodes have successfully deployed. As such, it even
provides a path to horizontal scaling!&lt;/p&gt;

&lt;p&gt;I’m really happy with the results, despite the amount of trial-and-error it took
to get things working. Hopefully this post will help reduce the amount of time
others need to make this powerful tool work for them!&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/push-to-deploy-with-aws-codedeploy.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/push-to-deploy-with-aws-codedeploy.html</guid>
        
        <category>aws</category>
        
        <category>devops</category>
        
        <category>php</category>
        
        <category>programming</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>On Deprecating ServiceLocatorAware</title>
        <description>&lt;p&gt;A month or two ago, we pushed a new release of
&lt;a href=&quot;https://zendframework.github.io/zend-mvc&quot;&gt;zend-mvc&lt;/a&gt; that provides a number of
forwards-compatibility features to help users prepare their applications for the
upcoming v3 release.&lt;/p&gt;

&lt;p&gt;One of those was, evidently, quite controversial: in v3, zend-servicemanager no
longer defines the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceLocatorAwareInterface&lt;/code&gt;, and this particular release
of zend-mvc raises deprecation notices when you attempt to inject a service
locator into application services, or pull a service locator within your
controllers.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;p&gt;The arguments go something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Dependency injection is too hard to understand!”&lt;/li&gt;
  &lt;li&gt;“This feature simplifies development!”&lt;/li&gt;
  &lt;li&gt;“If this is so bad, why was it in there in the first place?”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are usually followed by folks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;saying they’ll switch frameworks (okay, I guess?);&lt;/li&gt;
  &lt;li&gt;asking for re-instatement of the feature (um, no);&lt;/li&gt;
  &lt;li&gt;asking for removal of the deprecation notices (why? so you can delay your pain
until upgrading, when you’ll ask for re-instatement of the feature?); or&lt;/li&gt;
  &lt;li&gt;asking for a justification of the change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, I’ve decided to do the last, justify the change, which addresses the reasons
why we won’t do the middle two, and addresses why the assumptions and assertions
about &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceLocatorAware&lt;/code&gt;’s usefulness are mostly misguided.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;originally-posted-elsewhere&quot;&gt;Originally posted elsewhere&lt;/h2&gt;

  &lt;p&gt;This was originally posted as a comment on an issue. I’ve decided to post it
to my blog to reach a larger audience, and to provide a bit more background
and detail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The intent of zend-servicemanager is for use as an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control&lt;/a&gt; container.&lt;/p&gt;

&lt;p&gt;It was never intended as a general purpose &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locator&lt;/a&gt;
(interestingly, that link details mostly disadvantages to the pattern!); that
role was something foisted onto it in the spirit of “rapid application
development” and to “simplify initial development,” but the intention even there
was that, once a class has stabilized, you should refactor to inject
dependencies. (And we all know what happens with busy developers: refactoring is
put off or never occurs.)&lt;/p&gt;

&lt;p&gt;Why shouldn’t you inject a service locator?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/search?q=service%20locator%20anti%20pattern&quot;&gt;Google for “service locator anti pattern”&lt;/a&gt;
to get an idea of why it shouldn’t be used. The main points boil down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dependency hiding.&lt;/li&gt;
  &lt;li&gt;Error indirection.&lt;/li&gt;
  &lt;li&gt;Type safety.&lt;/li&gt;
  &lt;li&gt;Brittleness.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at each of these individually.&lt;/p&gt;

&lt;h2 id=&quot;dependency-hiding&quot;&gt;Dependency hiding&lt;/h2&gt;

&lt;p&gt;What is meant by “dependency hiding?”&lt;/p&gt;

&lt;p&gt;Take a look at this class signature:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DispatchableInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceLocatorAwareInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Defined by DispatchableInterface */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Defined by ServiceLocatorAwareInterface */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ServiceLocatorInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$serviceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on that, you’d expect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;that you can instantiate the object with no dependencies.&lt;/li&gt;
  &lt;li&gt;if you feel the need to, you &lt;em&gt;could&lt;/em&gt; pass a service locator to the instance.&lt;/li&gt;
  &lt;li&gt;you should be able to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; by passing it a request and
response instance, and it should successfully return.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service locator is nebulous; its purpose isn’t clear, and it’s clearly not a
&lt;em&gt;required&lt;/em&gt; dependency, as it’s in a setter method.&lt;/p&gt;

&lt;p&gt;So, you go and write a test for the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; method, and you get a
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceNotFoundException&lt;/code&gt;. What’s wrong?&lt;/p&gt;

&lt;p&gt;You dive into the code of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serviceLocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'authentication'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serviceLocator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'renderer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'identity'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s two possible places that &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceNotFoundException&lt;/code&gt; may have been
thrown: on the first line of the method, or within the &lt;code class=&quot;highlighter-rouge&quot;&gt;setBody()&lt;/code&gt; call. In both
cases, you’re faced with a conundrum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You now know that the service locator is &lt;em&gt;required&lt;/em&gt;. That wasn’t obvious from
looking at the class originally; it appeared to be an &lt;em&gt;optional&lt;/em&gt; dependency.&lt;/li&gt;
  &lt;li&gt;You have no idea what instance types are expected for each of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;authentication&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;renderer&lt;/code&gt; services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This latter is particularly troubling. You now have to understand all the
various locations within the application that services may be defined, and start
hunting through those. Chances are, you’ll discover that those service names may
actually be &lt;em&gt;aliases&lt;/em&gt;, which means you’ll determine what it aliases to, but then
have to re-start your search to determine what the actual service is.&lt;/p&gt;

&lt;p&gt;That, in a nutshell, is dependency hiding. The &lt;em&gt;requirements&lt;/em&gt; for operation of
the class are hidden &lt;em&gt;within&lt;/em&gt; the code, and the types cannot necessarily be
inferred.&lt;/p&gt;

&lt;p&gt;(Sure, you could add annotations above the &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt; calls to detail the types.
But that’s a band-aid; you still need to look in the code itself to determine
what the requirements are.)&lt;/p&gt;

&lt;p&gt;One side effect of dependency hiding is that &lt;em&gt;it makes testing more difficult&lt;/em&gt;.
I think the example above illustrates that; you cannot look at the signatures
alone to get an idea of behavior and requirements, but need to dig into the
code. Additionally, test setup becomes more difficult, and more brittle, as
you’re now required to add a dependency on a container, populate the container,
and hope you didn’t miss something. I’ll speak more on this later. The point is:
anything that makes testing more difficult means developers will avoid testing,
and that decreases code quality.&lt;/p&gt;

&lt;p&gt;Let’s break it down a bit more:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want a particular object instance.&lt;/li&gt;
  &lt;li&gt;You are now coupled to the service locator for retrieving the instance.&lt;/li&gt;
  &lt;li&gt;You retrieve the instance from the service locator via a string name, which
could be &lt;em&gt;anything&lt;/em&gt;, and not necessarily indicative of &lt;em&gt;purpose&lt;/em&gt; or its
&lt;em&gt;capabilities&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;That retrieval &lt;em&gt;may raise exceptions&lt;/em&gt; unrelated to the component being used,
which you need to account for either in your code or when debugging later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All you really want is the object instance. &lt;em&gt;Why not just inject that instance
in the constructor?&lt;/em&gt; Defining the requirements &lt;em&gt;as constructor arguments&lt;/em&gt; makes
them explicit, and ensures somebody looking solely at the API understands what
is required for operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: You want the dependency you’re consuming, not the three steps of
indirection required to get at it. Make all dependencies required, and inject
them in the constructor.&lt;/p&gt;

&lt;h2 id=&quot;error-indirection&quot;&gt;Error indirection&lt;/h2&gt;

&lt;p&gt;Re-using the example from above, let’s examine the fact that we got a
&lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceNotFoundException&lt;/code&gt;. This is happening &lt;em&gt;at runtime&lt;/em&gt;. Essentially, the
work of bootstrapping, routing, instantiating the controller, and pre-dispatch
listeners have already run, only to fail once we get to the actual logic
requested &lt;em&gt;because a dependency was missing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In a typical PHP application workflow, this is not much different from if the
dependencies were directly injected. But if you consider usage in a system such
as &lt;a href=&quot;http://reactphp.com&quot;&gt;React&lt;/a&gt;, where bootstrapping the application can occur
once, and dispatch happens over and over again, it’s quite problematic; it’s in
essence a runtime exception, &lt;em&gt;due to misconfiguration&lt;/em&gt;.  This is quite difficult
to trace, and not something you want to have happen in production.&lt;/p&gt;

&lt;h2 id=&quot;type-safety&quot;&gt;Type safety&lt;/h2&gt;

&lt;p&gt;Again, going back to the original example: we don’t know what the types expected
are, &lt;em&gt;nor can we guarantee that what we pull from the container will be correct.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An inexperienced developer, or one not familiar with all the use cases for a
given instance in a container, could map the service to an unexpected class.
You won’t know until runtime, in production, that this has occurred,
when you suddenly get “method does not exist” fatal PHP errors. These are
difficult to track down, as you will not know what the type is, what was
expected, nor where the instance is originally defined. It will take several
steps through the debugger to determine that it’s due to a misconfigured
container.&lt;/p&gt;

&lt;p&gt;Compare this to dependencies declared in the constructor:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DispatchableInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;AuthenticationService&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$authentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;RendererInterface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$renderer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Defined by DispatchableInterface */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll still get a fatal error, but you’ll know that the class was being
instantiated with an invalid argument from the beginning, and know that you need
to check your mappings and/or factories. This type of problem can often be found
with static analysis tools, giving another way for you to help improve your code
quality easily.&lt;/p&gt;

&lt;p&gt;Another aspect of this is that your IDEs will now also be able to assist you in
understanding what methods are available. Because the property is injected in
the constructor, the &lt;em&gt;static analysis&lt;/em&gt; (I’m using that word again!) built-in to
most IDEs will be able to infer the type when you access it in your code, and
give you type hinting. This is not universally true with service locators (I
understand PHPStorm is making some headway on this, but I also know it’s a very
difficult task to accomplish, and error prone).&lt;/p&gt;

&lt;h2 id=&quot;brittleness&quot;&gt;Brittleness&lt;/h2&gt;

&lt;p&gt;Relying on a service locator introduces brittleness into your designs.&lt;/p&gt;

&lt;p&gt;Every time you add a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;, you’re introducing a new dependency. This
often breaks tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re mocking the service locator, you now have additional calls to its
methods that may be called in the course of a test, making the mock fail its
assertions.&lt;/li&gt;
  &lt;li&gt;If you’re using a concrete locator instance, and an instance is expected to be
present, you now get exceptions raised over the course of test execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This sort of brittleness leads to developers not wanting to test, making the
code more brittle and more likely to break in unexpected ways in the future.
&lt;em&gt;&lt;strong&gt;Any practice that makes testing more difficult should be reconsidered.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, it leads to &lt;em&gt;undocumented requirements&lt;/em&gt;, making it less clear for
a consumer to know what services need to be present for the code to work. When
you work across teams, this is critical.&lt;/p&gt;

&lt;p&gt;Another aspect of using a service locator is that it’s very easy for your class
to grow to span too many responsibilities. Let me explain.&lt;/p&gt;

&lt;p&gt;One argument often used in favor of using a service locator is to facilitate
&lt;em&gt;optional&lt;/em&gt; dependencies: dependencies that are only used during specific paths
of code execution. If the dependency is particularly heavy (web services,
database access, etc.), the argument is that it makes sense to pull these from
the container only if they’re about to be used.&lt;/p&gt;

&lt;p&gt;There are two ways to address this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zend-servicemanager (and several other IoC implementations) already offers
&lt;a href=&quot;http://zendframework.github.io/zend-servicemanager/lazy-services/&quot;&gt;lazy services&lt;/a&gt;,
which solve the problem by creating a proxy class that wraps the factory for
retrieving the service. You interact with it just as you would the original
instance, but the “heavy instantiation” is delayed until first use.&lt;/li&gt;
  &lt;li&gt;Split your concerns into multiple classes! This is the better solution
anyways; if you know certain dependencies are only in certain code paths,
create a new controller for that path, and route specifically to it. As an
example, if you know that database access will only occur on (a) POST requests
to the service, and (b) when validation occurs, then:
    &lt;ul&gt;
      &lt;li&gt;Create a controller that maps specifically to POST requests for the given
path, and&lt;/li&gt;
      &lt;li&gt;optionally, wrap the database connection as a lazy service. Chances are,
though, that if you get the request routed to that specific controller,
having the database access ready will be acceptable performance-wise.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: dependence on service locators leads to brittle design and scope
creep. When you pay attention to dependencies, you end up splitting concerns
into multiple classes, making them easier to test and maintain.&lt;/p&gt;

&lt;h2 id=&quot;there-are-valid-use-cases&quot;&gt;There &lt;em&gt;are&lt;/em&gt; valid use cases&lt;/h2&gt;

&lt;p&gt;Service locators have some valid use cases. When you have a number of related
instances, and pulling them at runtime will be based on input, a service locator
is ideal. This scenario includes things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;plugin and helper systems&lt;/li&gt;
  &lt;li&gt;strategy patterns&lt;/li&gt;
  &lt;li&gt;routing systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these cases, however, we’re not dealing with general application
dependencies; we’re working with specific contexts, and the instances pulled
work in that context.&lt;/p&gt;

&lt;p&gt;In many cases, even these could be directly injected. If you &lt;em&gt;know&lt;/em&gt; your code
paths include specific plugins or helpers, you can also inject those. (We’ve
done this with several Apigility controllers, as it has simplified testing!)&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;As a general-purpose way of getting dependencies, service locators are an
anti-pattern at best, and lead to quality decline and brittle architecture.&lt;/p&gt;

&lt;p&gt;We introduced the &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceLocatorAwareInterface&lt;/code&gt; due to pressure from users who
wanted “rapid application development” features, and who were unclear about the
benefits of dependency injection. At the time, &lt;em&gt;it seemed like a good idea&lt;/em&gt;; we
were listening and responding to our users.&lt;/p&gt;

&lt;p&gt;However, with the benefit of hindsight, I think we made a mistake when we did
so, and ultimately did a disservice to our users; the implementation promotes
bad habits and reduces code quality for those who rely on the pattern. Hopefully
the discussion above sheds more light on why we’ve finally decided to remove it,
and how we feel the removal will help you improve your code.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Apr 2016 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/on-deprecating-servicelocatoraware.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/on-deprecating-servicelocatoraware.html</guid>
        
        <category>patterns</category>
        
        <category>php</category>
        
        <category>programming</category>
        
        <category>zend-framework</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Serve PSR-7 Middleware Via React</title>
        <description>&lt;p&gt;I’ve been intending to play with &lt;a href=&quot;http://reactphp.org&quot;&gt;React&lt;/a&gt; for some time,
but, for one reason or another, kept putting it off. This past week, I carved
some time finally to experiment with it, and, specifically, to determine if
serving &lt;a href=&quot;http://www.php-fig.org/psr/psr-7&quot;&gt;PSR-7&lt;/a&gt; middleware was possible.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h2 id=&quot;react&quot;&gt;React&lt;/h2&gt;

&lt;p&gt;For those of you unfamiliar with it, React is a project with the goal of
providing event-driven, asynchronous PHP, in a vein similar to
&lt;a href=&quot;https://nodejs.org&quot;&gt;node.js&lt;/a&gt;. To accomplish this, it makes use of one of
several experimental extensions, falling back to PHP’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;tick()&lt;/code&gt; support
and stream utilities. The project provides the event loop implementation; a
Promises library; a cross-platform, low-level socket library; an HTTP
server; and several other libraries.&lt;/p&gt;

&lt;p&gt;The library that most associate with React, though, is the HTTP server. This
library is in the same vein as node’s &lt;a href=&quot;https://nodejs.org/api/http.html&quot;&gt;HTTP&lt;/a&gt;
module, which provides the low-level plumbing for creating HTTP servers.&lt;/p&gt;

&lt;p&gt;A basic server looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/plain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\EventLoop\Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\Socket\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\Http\Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Server running at http://127.0.0.1:1337&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I wanted to do was get React to execute PSR-7 middleware, specifically an
&lt;a href=&quot;https://zendframework.github.io/zend-expressive&quot;&gt;Expressive&lt;/a&gt; application.&lt;/p&gt;

&lt;h2 id=&quot;translating-react-to-psr-7&quot;&gt;Translating React to PSR-7&lt;/h2&gt;

&lt;p&gt;React provides its own request and response implementations. As noted, these are
very much aligned with node, down to the level that each is a stream, with
additional methods based on the message type. If you’ve played with node at all,
React’s HTTP layer will feel very familiar.&lt;/p&gt;

&lt;p&gt;The problem, though, is that the messages differ from PSR-7; you can’t just pass
them into middleware expecting PSR-7 and have everything work. So, a translation
layer was required.&lt;/p&gt;

&lt;p&gt;This boiled down to two tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Marshaling a PSR-7 request instance from the React request.&lt;/li&gt;
  &lt;li&gt;Pulling information from the PSR-7 response returned by middleware, and using
that information to populate and write to the React response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I discovered quickly that the latest stable release and the current master
branch of react/http differ significantly. In particular, the current master
branch offers a number of new features, such as URL discovery and file upload
handling, which make generating the PSR-7 request far easier. In the end, the
logic becomes something like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'php://temp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;fwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;fseek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Rewind the stream
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend\Diactoros\ServerRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cookies; these can be handled by PSR-7 middleware
&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHttpVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Handling the response can be relatively simple:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That said, I found it was useful to perform a few additional things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If no content type is set, set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;text/html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Rewind the PSR-7 response body before retrieving it. I’ve occasionally
observed truncated content otherwise.&lt;/li&gt;
  &lt;li&gt;Close the PSR-7 response body when done. This will close the underlying
resource, freeing up memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$psr7Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rewind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also at one point attempted to iterate through the PSR-7 stream, like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$reactResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, this never worked, and led to connection timeouts. If somebody in
the React community wants to edify my as to why (or how I could make it work),
I’d appreciate it!&lt;/p&gt;

&lt;h2 id=&quot;static-files&quot;&gt;Static files&lt;/h2&gt;

&lt;p&gt;When you create an HTTP server, it’s often useful to serve static files: CSS,
JS, images, etc. Out of the box, however, React does not do so.&lt;/p&gt;

&lt;p&gt;I tried an approach &lt;a href=&quot;https://blog.wyrihaximus.net/2015/04/reactphp-http/&quot;&gt;using React’s filesystem
library&lt;/a&gt;, but had no luck
with it; for some reason, file contents were never returned. As such, I took
another approach entirely, and wrote PSR-7 middleware to serve the files, making
this the outer layer of my middleware so that it executes earliest, and then
delegates to the application middleware when files are not found. I also have
the middleware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;implement a whitelist, to restrict which files may be served&lt;/li&gt;
  &lt;li&gt;match directories to index files (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rtrim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#\.(?P&amp;lt;type&amp;gt;[a-z][a-z0-9]{0,3})$#'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentTypeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$response&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentTypeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fun part of this is that, because PSR-7 and React both deal with streams,
the approach is incredibly performant, and uses very few resources!&lt;/p&gt;

&lt;h2 id=&quot;making-it-reusable&quot;&gt;Making it reusable&lt;/h2&gt;

&lt;p&gt;To make this reusable, I created a new library,
&lt;a href=&quot;https://github.com/phly/react2psr7&quot;&gt;phly/react2psr7&lt;/a&gt;. This library contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React2Psr7\ReactRequestHandler&lt;/code&gt;, which accepts a PSR-7 middleware to its
constructor, and then, for each invocation, marshals a PSR-7 request,
creates an empty PSR-7 response, dispatches the middleware, and uses the
returned response to feed the React response.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React2Psr7\StaticFiles&lt;/code&gt;, which is the PSR-7 middleware for serving static
files from the filesystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install it using:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer require &lt;span class=&quot;s2&quot;&gt;&quot;react/http:^0.5@dev&quot;&lt;/span&gt; phly/react2psr7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Since this uses the current development series of react/http, you need to
install that package manually.)&lt;/p&gt;

&lt;p&gt;A basic server script for an Expressive application then looks like this:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// server.php
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\EventLoop\Factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\Http\Server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React\Socket\Server&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React2Psr7\ReactRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zend\Expressive\Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'config/container.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Listen on all ports; omit second argument to restrict to localhost.
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$loop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Expressive, I also added configuration for the &lt;code class=&quot;highlighter-rouge&quot;&gt;StaticFiles&lt;/code&gt; middleware to
my &lt;code class=&quot;highlighter-rouge&quot;&gt;config/autoload/middleware-pipeline.global.php&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'dependencies'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'factories'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;React2Psr7\StaticFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React2Psr7\StaticFilesFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'middleware_pipeline'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'static'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'middleware'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React2Psr7\StaticFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'priority'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Execute earliest!
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fire up the server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php server.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then start making requests (the following is using &lt;a href=&quot;http://httpie.org&quot;&gt;HTTPie&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET localhost:1337/api/ping
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET localhost:1337/zf-logo.png
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET localhost:1337/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;I have a couple things on my roadmap still:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I need to play with file uploads to see how those are handled, and the impact
to performance and resource usage. Right now there’s a potential for
duplication of the resources, which makes me hesitant to use it in such
scenarios.&lt;/li&gt;
  &lt;li&gt;I’d like to try and create a variant of the React HTTP server that marshals
PSR-7 requests and responses and emits the PSR-7 response directly, instead of
requiring casting. This would largely solve the above problems.&lt;/li&gt;
  &lt;li&gt;Documentation for the React project. Currently, each subproject has a README
file that details the simplest use case, but anything more requires diving
through the code. In several cases, I determined that methods are often
overloaded to return promises, but how and where that happens is not clear.
As such, while the &lt;em&gt;basics&lt;/em&gt; of the system are fairly easy to pick up, anything
more requires a ton of domain knowledge, which makes in unapproachable. I’d
love to help solve that problem through documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the meantime, I’m quite happy with my weekend experiment!&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Apr 2016 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/serve-psr-7-middleware-via-react.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/serve-psr-7-middleware-via-react.html</guid>
        
        <category>async</category>
        
        <category>php</category>
        
        <category>programming</category>
        
        <category>psr-7</category>
        
        <category>react</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Automating GitHub Pages Builds with MkDocs</title>
        <description>&lt;p&gt;One of the final tasks in prepping for the &lt;a href=&quot;/blog/2016-01-28-expressive-stable.html&quot;&gt;Expressive 1.0 release&lt;/a&gt;
was setting up the documentation site. We’d decided to use GitHub Pages for
this, and we wanted to automate builds so that as we push to the master branch,
documentation is deployed.&lt;/p&gt;

&lt;p&gt;The process turned out both simple and bewilderingly difficult. This post is
intended to help others in the same situation.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;In looking at the problem, we realized we had a number of requirements we
needed to consider for any solution we developed.&lt;/p&gt;

&lt;h3 id=&quot;technologies&quot;&gt;Technologies&lt;/h3&gt;

&lt;p&gt;First, we chose &lt;a href=&quot;http://www.mkdocs.org&quot;&gt;MkDocs&lt;/a&gt; for our documentation. MkDocs
uses plain old Markdown, which we’re already quite comfortable with due to being
on GitHub, StackOverflow, Slack, and so many other services that use it.
With MkDocs, you create a file, &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt;, in which you specify the table of
contents, linking titles to the documents themselves. Once you run it, it
generates static HTML files.&lt;/p&gt;

&lt;p&gt;MkDocs allows you to specify a template, and ships with several of its own; the
most well-known is the one used on &lt;a href=&quot;http://rtfd.org&quot;&gt;ReadTheDocs&lt;/a&gt;. One reason we
chose MkDocs is because it has a good-sized ecosystem, which means quite a few
themes to choose from; this gave us a tremendous boost in rolling out something
that both looked good and was usable.&lt;/p&gt;

&lt;p&gt;This meant, however, that we had the following dependencies in order to build
our documentation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MkDocs itself.&lt;/li&gt;
  &lt;li&gt;One or more python extensions; in particular, we chose an extension that
fixes issues with how the default Markdown renderer renders fenced code
blocks that are part of bullet points or blockquotes.&lt;/li&gt;
  &lt;li&gt;The custom theme we were developing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As such, this meant our build automation was going to require grabbing these
items, ideally caching them between builds.&lt;/p&gt;

&lt;h3 id=&quot;build-only-when-necessary&quot;&gt;Build only when necessary&lt;/h3&gt;

&lt;p&gt;The other aspect is that there’s no reason to build the documentation for every
build we do on the CI server. We only want to build:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on the master branch,&lt;/li&gt;
  &lt;li&gt;when it’s not a pull request,&lt;/li&gt;
  &lt;li&gt;if the build is a success,&lt;/li&gt;
  &lt;li&gt;and only once per build.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On any given build, we’re actually running at least four jobs, one each for PHP
5.5, 5.6, 7, and HHVM. We don’t want to build and deploy the documentation for
each!&lt;/p&gt;

&lt;h3 id=&quot;reusability&quot;&gt;Reusability&lt;/h3&gt;

&lt;p&gt;While we were doing this initially for Expressive, we also want to do the same
for each of the ZF components. So any solution we built needed to be reusable
with minimum fuss. If we have an update to the theme, we don’t want to have to
update each and every one of the component repositories! Similarly, if there are
any changes to the deployment script, we don’t want to have to roll it out to
all the repositories.&lt;/p&gt;

&lt;h3 id=&quot;pushing-to-gh-pages&quot;&gt;Pushing to gh-pages&lt;/h3&gt;

&lt;p&gt;Finally, any build automation we did would be required to push to the gh-pages
branch of the repository on successful build. This would require having a token
or user credentials on the CI server.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-automation&quot;&gt;Creating the automation&lt;/h2&gt;

&lt;p&gt;With the requirements in place, we could start work on the solution. Since we
already use &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis-CI&lt;/a&gt; for our builds, we decided to
re-use it for building documentation. Of course, the challenge then was creating
appropriate configuration to meet our requirements.&lt;/p&gt;

&lt;h3 id=&quot;github-credentials&quot;&gt;GitHub credentials&lt;/h3&gt;

&lt;p&gt;In order to push from Travis, we need to have adequate credentials. There are a
couple of ways to do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use a &lt;a href=&quot;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&quot;&gt;personal access token&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Supply your private SSH key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both cases, you need to add information to your Travis environment.
The problem, however, is that if anybody has access to these values, they can
essentially commit using your credentials — which you &lt;em&gt;definitely&lt;/em&gt; do not
want to have happen! As such, you need to encrypt the value so that only Travis
knows about it.&lt;/p&gt;

&lt;p&gt;I covered encrypting your SSH key in my blog post &lt;a href=&quot;/blog/2015-12-14-secure-phar-automation.html&quot;&gt;on secure PHAR automation&lt;/a&gt;,
and, in that particular case, I had several files needing encryption, which led
to a fairly complex setup. If you have no other secrets to encrypt, go with the
personal access token. For one, it simplifies security; if you find the token
has been compromised, you can simply delete it from GitHub, without needing to
go to the extra work of creating a new SSH key and propagating it. It also
simplifies setup, as you can encrypt a single value, and simply configure it.&lt;/p&gt;

&lt;p&gt;To encrypt the token, use the &lt;a href=&quot;https://github.com/travis-ci/travis.rb#readme&quot;&gt;Travis CLI tool&lt;/a&gt;,
and then paste the value into your &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;. In the following, I assign it
to the env variable &lt;code class=&quot;highlighter-rouge&quot;&gt;GH_TOKEN&lt;/code&gt;, which is a common convention:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;travis encrypt &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &amp;lt;org&amp;gt;/&amp;lt;repo&amp;gt; &lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;token value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviously, substitute your organization and repository names, as well as your
token. This will output something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please add the following to your .travis.yml file:

  secure: &quot;......=&quot;

Pro Tip: You can add it automatically by running with --add.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: I never use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--add&lt;/code&gt; switch, as the &lt;code class=&quot;highlighter-rouge&quot;&gt;travis&lt;/code&gt; utility changes all the
whitespacing in the file.&lt;/p&gt;

&lt;p&gt;Copy and paste the value into the &lt;code class=&quot;highlighter-rouge&quot;&gt;env.global&lt;/code&gt; section of your &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;
(creating it if you haven’t already):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Travis will automatically decrypt the value and export it to your environment.
In its logs, you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;GH_TOKEN=secure&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;when-to-build&quot;&gt;When to build?&lt;/h3&gt;

&lt;p&gt;We know that Travis-CI has a number of events it triggers as part of a typical
build workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;after_script&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;before_deploy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;after_deploy&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; event may seem like the correct one, but it requires a very
specific workflow, which we won’t be using. But it turns out there’s another
event you can use: &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt;! It runs after &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;, and before either
&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;after_script&lt;/code&gt; are triggered.&lt;/p&gt;

&lt;p&gt;That said, I discovered something problematic: Travis’ caching happens
immediately following &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;, and before &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt;, or
&lt;code class=&quot;highlighter-rouge&quot;&gt;after_script&lt;/code&gt;. This meant that any assets we installed as part of documentation
deployment — MkDocs, the theme, etc. — would not be cached.&lt;/p&gt;

&lt;p&gt;So I reached out to Travis’ support team, and they told me about another cool
trick: the &lt;code class=&quot;highlighter-rouge&quot;&gt;$TRAVIS_TEST_RESULT&lt;/code&gt; variable indicates the current exit status from
the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; section; we could test this on the last line of the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;
section to conditionally install assets!&lt;/p&gt;

&lt;p&gt;As a result, we ended up with a line under &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; to install the assets, and
another under &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt; to perform the actual build. They could likely be
combined, but I chose not to: I don’t want the results of building the
documentation to result in a failed build. I hope one day that caching will
happen at the end of the build instead, so we can put them both under
&lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;environment-variables&quot;&gt;Environment variables&lt;/h3&gt;

&lt;p&gt;This leads to environment variables. In order to determine if a documentation
build is necessary, we can use an environment variable that is only set for the
environment in which we want to build. Since most projects I do are PHP, we had
to choose which build in the matrix to use. Our projects test on PHP 5.5, 5.6,
7.0, and HHVM. Since most of our users are on PHP 5 versions, we decided to do
documentation builds on the latest stable 5 build: 5.6.&lt;/p&gt;

&lt;p&gt;We also only want to build if we’re on the master branch, and &lt;em&gt;not&lt;/em&gt; as part of a
pull request; the branch reports as master if a pull request was issued against
that branch, which is why the criteria is so specific.&lt;/p&gt;

&lt;p&gt;Finally, I know that, eventually, I’ll have MkDocs installed. Due to the fact
that we’re using Docker builds on Travis, I also know that this means I’ll be
installing MkDocs using &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install --user&lt;/code&gt; versus via apt-get, since we don’t
have root access. This means that MkDocs will be in &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.local/bin&lt;/code&gt;, so I’ll
need to update my &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; for the environment in which I build.&lt;/p&gt;

&lt;p&gt;Fortunately, you can do env variable declarations that are the product of
calculations in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;. This meant that I ended up with the
following build matrix:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fast_finish&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.5&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EXECUTE_CS_CHECK=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.6&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EXECUTE_TEST_COVERALLS=true&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEPLOY_DOCS=&quot;$(if [[ $TRAVIS_BRANCH == 'master' &amp;amp;&amp;amp; $TRAVIS_PULL_REQUEST == 'false' ]]; then echo -n 'true' ; else echo -n 'false' ; fi)&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PATH=&quot;$HOME/.local/bin:$PATH&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hhvm&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;allow_failures&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hhvm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEPLOY_DOCS&lt;/code&gt; environment variable with values of either
“true” or “false”, which I can then test later. My &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; is also updated.&lt;/p&gt;

&lt;p&gt;The above are build-specific variables. However, I also needed a few variables
that could be accessed by scipts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want to be able to provide the base site URL to my mkdocs configuration. We
don’t include this in the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt; by default, so that you can build
locally. For our production pages, though, we need it to ensure the search
functionality works correctly, as we’ll be in a sub-path.&lt;/li&gt;
  &lt;li&gt;In order to commit via git, git requires the user’s name and email. My
experience has also been that these need to match the user who generated the
personal access token.&lt;/li&gt;
  &lt;li&gt;Because we want the functionality re-usable, I’ll also need to provide the
location of the git repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As such, I made the following additions to my &lt;code class=&quot;highlighter-rouge&quot;&gt;env.global&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SITE_URL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://organization.github.io/repository&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_USER_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Full&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Name&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_USER_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@domain.tld&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_REF&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.com/organization/repository.git&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GH_REF&lt;/code&gt; is the reference to the github repository being used. You’ll note the
lack of a scheme to the URL; this is because the script for pushing the commits
to the gh-pages branch will create the full URL using the &lt;code class=&quot;highlighter-rouge&quot;&gt;GH_TOKEN&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add upstream https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;@&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_REF&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that the environment is all setup, we can approach installation of the
theme, and building the docs.&lt;/p&gt;

&lt;h3 id=&quot;how-to-install&quot;&gt;How to install?&lt;/h3&gt;

&lt;p&gt;In order to build the docs with our custom theme, we need the custom theme
locally. Additionally, we likely want to download the theme only when there are
changes; we should cache it between requests. Additionally, if assets are not
cached, we should &lt;em&gt;not&lt;/em&gt; download them unless the build has been successful.&lt;/p&gt;

&lt;p&gt;This, frankly, was one of the harder parts to figure out, and I ended up needing
some pointers from the support team at Travis to figure it out. (Thanks for the
great pointers, you fine folks at Travis!)&lt;/p&gt;

&lt;p&gt;As noted earlier, caching occurs immediately following execution of the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;
section. This rules out the &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt; script for this task, as any assets
downloaded then will never be cached. But how do we know when the build is
successful?&lt;/p&gt;

&lt;p&gt;As noted earlier, the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;TRAVIS_TEST_RESULT&lt;/code&gt; holds the exit
value for the build. If any part of the script returns a non-zero value, then
the value will be non-zero from that point forward. As such, if we place a
script at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; section that tests this value, we can
conditionally trigger an action!&lt;/p&gt;

&lt;p&gt;I chose to create a script in our theme repository that has all the logic for
our documentation toolchain installation. This allows us to modify the
installation script as needed, without needing to update the various components
that will be adding the automation. The script currently looks something like
this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
pip install &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; mkdocs
pip install &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; pymdown-extensions
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; zf-mkdoc-theme/theme &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; zf-mkdoc-theme &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://github.com/zendframework/zf-mkdoc-theme/releases/latest | egrep &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/zendframework/zf-mkdoc-theme/archive/[0-9]*\.[0-9]*\.[0-9]*\.tar\.gz'&lt;/span&gt; | head &lt;span class=&quot;nt&quot;&gt;-n1&lt;/span&gt; | wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; zf-mkdoc-theme.tgz &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/ &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; - &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;zf-mkdoc-theme &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf ../zf-mkdoc-theme.tgz &lt;span class=&quot;nt&quot;&gt;--strip-components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above runs our &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install&lt;/code&gt; commands to install MkDocs and the extensions
we use, and, if the theme directory is missing, identifies and downloads the
latest tarball of the theme and extracts it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One gotcha I encountered: When you enable caching of a directory, Travis
creates the directory even if no cache entries were found for it; as such, we
need to test for a path &lt;em&gt;under&lt;/em&gt; the directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, how do we get the installation script? With the following line in our
&lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;build tasks&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $DEPLOY_DOCS == &quot;true&quot; &amp;amp;&amp;amp; &quot;$TRAVIS_TEST_RESULT&quot; == &quot;0&quot; ]]; then wget -O theme-installer.sh &quot;https://raw.githubusercontent.com/zendframework/zf-mkdoc-theme/master/theme-installer.sh&quot; ; chmod 755 theme-installer.sh ; ./theme-installer.sh ; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above grabs the script and executes it, but only if we’re in the environment
designated for documentation deployment, and only if the build has been
successful to this point. This should &lt;em&gt;always&lt;/em&gt; be the last line of the &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt;
section.&lt;/p&gt;

&lt;h3 id=&quot;how-to-build&quot;&gt;How to build?&lt;/h3&gt;

&lt;p&gt;Now that we know we have the build tools, what about building the documentation
itself?&lt;/p&gt;

&lt;p&gt;For this, I wrote a deployment script, which we include in our theme repository.
We include it in the theme for &lt;em&gt;reusability&lt;/em&gt; which was one of our requirements.
This ensures that as build and deployment change, we don’t need to update all
the repositories that are building documentation; we can make the changes in the
theme repository, tag a new release, and on the next build, each will pick up
the changes.&lt;/p&gt;

&lt;p&gt;The deployment script performs several tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It creates the build directory, and initializes it as a git repository with
the upstream set to the repository’s gh-pages branch, using the &lt;code class=&quot;highlighter-rouge&quot;&gt;GH_TOKEN&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;GH_HREF&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It sets the git configuration to use the configured GitHub user name and
email.&lt;/li&gt;
  &lt;li&gt;It runs the build (which is itself another script).&lt;/li&gt;
  &lt;li&gt;It adds the changed files, commits them, and pushes them to the remote.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, the deployment script looks like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; errexit &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; nounset

&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get curent commit revision&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git rev-parse &lt;span class=&quot;nt&quot;&gt;--short&lt;/span&gt; HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initialize gh-pages checkout&lt;/span&gt;
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; doc/html
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;doc/html
    git init
    git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_USER_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_USER_EMAIL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git remote add upstream &lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GH_REF&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git fetch upstream
    git reset upstream/gh-pages
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build the documentation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/build.sh

&lt;span class=&quot;c&quot;&gt;# Commit and push the documentation to gh-pages&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;doc/html
    touch &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
    git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
    git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Rebuild pages at &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    git push &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; upstream HEAD:gh-pages
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;notes-on-the-script&quot;&gt;Notes on the script&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;We build our documentation in &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/html/&lt;/code&gt;, which is excluded from the
repository via &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, allowing us to safely clone to that location.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -A .&lt;/code&gt; will remove any files previously tracked that are now
deleted, and add any new paths found. This makes automating far simpler,
as we don’t need to worry about additions, removals, or renames.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Additionally, you’ll note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; command includes the &lt;code class=&quot;highlighter-rouge&quot;&gt;-q&lt;/code&gt;
switch. This is &lt;strong&gt;very&lt;/strong&gt; important: if you don’t include it, the command
output includes the push URL, which includes the GitHub token! Again, you
don’t want that value leaked, so take the steps to ensure it isn’t!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The build script performs a few tasks, which might vary based on your own needs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It adds some configuration to the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt;, including:
    &lt;ul&gt;
      &lt;li&gt;Setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;site_url&lt;/code&gt; value, based on our environment variable.&lt;/li&gt;
      &lt;li&gt;Adds configuration for several extensions. In particular, we don’t use
Pygments (instead, we opt for using &lt;a href=&quot;http://prismjs.com&quot;&gt;prism.js&lt;/a&gt;),
and we use pymdownx.superfences, which corrects issues with fenced code
blocks that are nested in lists or blockquotes.&lt;/li&gt;
      &lt;li&gt;Specifies the &lt;code class=&quot;highlighter-rouge&quot;&gt;theme_dir&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It runs &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs build --clean&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;It runs a few utilities we’ve written for doing things like swapping out the
landing page, and adding markup to make images responsive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding the &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs.yml&lt;/code&gt; changes, the reason we don’t include these by default
is two-fold:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It allows developers to run &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdocs&lt;/code&gt; locally without requiring that the theme
or extensions be present.&lt;/li&gt;
  &lt;li&gt;It allows us to preview documentation on &lt;a href=&quot;http://rtfd.org&quot;&gt;ReadTheDocs&lt;/a&gt;; while
the automation we’re setting up largely obviates the need for that service,
it’s still useful for previewing documentation targeting the &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The build script looks like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Update the mkdocs.yml&lt;/span&gt;
cp mkdocs.yml mkdocs.yml.orig
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;site_url: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SITE_URL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;markdown_extensions:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mkdocs.yml
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    - markdown.extensions.codehilite:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mkdocs.yml
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;        use_pygments: False&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mkdocs.yml
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    - pymdownx.superfences&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mkdocs.yml
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;theme_dir: zf-mkdoc-theme/theme&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; mkdocs.yml

mkdocs build &lt;span class=&quot;nt&quot;&gt;--clean&lt;/span&gt;
mv mkdocs.yml.orig mkdocs.yml

&lt;span class=&quot;c&quot;&gt;# Make images responsive&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Making images responsive&quot;&lt;/span&gt;
php &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/img_responsive.php

&lt;span class=&quot;c&quot;&gt;# Replace landing page content&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Replacing landing page content&quot;&lt;/span&gt;
php &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/swap_index.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could combine the build and deploy scripts if desired. I did not, as it
allows me to clone the theme directory into my component checkout and build the
documentation as it will appear:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zf-mkdoc-theme/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .git/info/exclude
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone zendframework/zf-mkdoc-theme
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./zf-mkdoc-theme/build.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; 0:8000 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; doc/html/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have the scripts in place in our theme, we need to tell Travis to
execute them. We do that in an &lt;code class=&quot;highlighter-rouge&quot;&gt;after_success&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $DEPLOY_DOCS == &quot;true&quot; ]]; then echo &quot;Preparing to build and deploy documentation&quot; ; ./zf-mkdoc-theme/deploy.sh ; echo &quot;Completed deploying documentation&quot; ; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above will only execute if the build is successful, which means we only need
to check if we’re in the target environment. We’ll assume that the documentation
build tools and theme are present, and simply execute the deployment script.&lt;/p&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;p&gt;One of the requirements is caching, and in the above, we’ve made some decisions
about when to execute certain tasks based on the assumption that we’ll be
caching. How do we actually do that, though?&lt;/p&gt;

&lt;p&gt;Travis allows caching assets via configuration. You can specify directories or
files, with entries being relative to the checkout unless they are fully
qualified paths. We want to cache:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The results of installing MkDocs.&lt;/li&gt;
  &lt;li&gt;The theme directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll add the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.local&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zf-mkdoc-theme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the ZF components, we also cache the vendor directory and the global
Composer cache, which helps speed up builds tremendously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that in place, we’ve now met all of our requirements!&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;In the end, the result was our new &lt;a href=&quot;https://github.com/zendframework/zf-mkdoc-theme&quot;&gt;zf-mkdoc-theme repository&lt;/a&gt;.
It contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The theme installer script invoked within our &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; section,
&lt;code class=&quot;highlighter-rouge&quot;&gt;theme-installer.sh&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The various build scripts and utilities (&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;, etc.).&lt;/li&gt;
  &lt;li&gt;The MkDocs theme (under the &lt;code class=&quot;highlighter-rouge&quot;&gt;theme/&lt;/code&gt; subdirectory).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now consume this from any of our components, by ensuring the following
are in our &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$HOME/.local&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zf-mkdoc-theme&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SITE_URL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://organization.github.io/repository&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_USER_NAME&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Committer&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_USER_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@domain.tld&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;GH_REF&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.com/zendframework/zend-expressive.git&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;...&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fast_finish&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5.6&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EXECUTE_TEST_COVERALLS=true&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEPLOY_DOCS=&quot;$(if [[ $TRAVIS_BRANCH == 'master' &amp;amp;&amp;amp; $TRAVIS_PULL_REQUEST == 'false' ]]; then echo -n 'true' ; else echo -n 'false' ; fi)&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PATH=&quot;$HOME/.local/bin:$PATH&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build something&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $DEPLOY_DOCS == &quot;true&quot; &amp;amp;&amp;amp; &quot;$TRAVIS_TEST_RESULT&quot; == &quot;0&quot; ]]; then wget -O theme-installer.sh &quot;https://raw.githubusercontent.com/zendframework/zf-mkdoc-theme/master/theme-installer.sh&quot; ; chmod 755 theme-installer.sh ; ./theme-installer.sh ; fi&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if [[ $DEPLOY_DOCS == &quot;true&quot; ]]; then echo &quot;Preparing to build and deploy documentation&quot; ; ./zf-mkdoc-theme/deploy.sh ; echo &quot;Completed deploying documentation&quot; ; fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the above in place, any pushes to the master branch that succeed on the PHP
5.6 job will then result in updating and deploying our documentation!&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;This was a fun experiment, and I’ve been quite happy with &lt;a href=&quot;https://zendframework.github.io/zend-expressive/&quot;&gt;the results&lt;/a&gt;.
I’m also looking forward to deploying this out to other components and libraries
I maintain or assist in, as I love the idea of having up-to-date documentation
with a style unique to the project.&lt;/p&gt;

&lt;p&gt;The zf-mkdoc-theme referenced throughout this post is on github, and you can use
it as a guideline for your ow projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zendframework/zf-mkdoc-theme&quot;&gt;https://github.com/zendframework/zf-mkdoc-theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope others are inspired to do the same, and find the tips in this post
useful!&lt;/p&gt;
</description>
        <pubDate>Fri, 29 Jan 2016 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/automating-github-pages-builds-with-mkdocs.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/automating-github-pages-builds-with-mkdocs.html</guid>
        
        <category>automation</category>
        
        <category>github</category>
        
        <category>mkdocs</category>
        
        <category>php</category>
        
        <category>programming</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>Expressive 1.0 in the Wild!</title>
        <description>&lt;p&gt;A few hours ago, we pushed &lt;a href=&quot;https://github.com/zendframework/zend-expressive/releases/tag/1.0.0&quot;&gt;Expressive 1.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a huge milestone for the ZF3 initiative; I’ve even called it the
cornerstone. It signals a huge shift in direction for the project, returning to
its roots as a &lt;em&gt;component&lt;/em&gt; library. Expressive itself, however, also signals
the future of PHP applications we envision: composed of layered, single-purpose
PSR-7 middleware.&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;p&gt;I won’t go into the details of the Expressive 1.0 release; you can read
about it &lt;a href=&quot;http://framework.zend.com/blog/2016-01-28-expressive-1.0-stable.html&quot;&gt;on the Zend Framework blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I’m excited about is that this marks the fruition of the PSR-7 effort for
me. I started work on PSR-7 due to the successes I’d had working with middleware
in node.js, and wanted to see a similar ecosystem in PHP.&lt;/p&gt;

&lt;p&gt;Today, we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://relayphp.com/&quot;&gt;Relay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slimframework.com/&quot;&gt;Slim (v3)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pennyphp.org/&quot;&gt;Penny&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zendframework.github.io/zend-expressive/&quot;&gt;Expressive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and likely a number of others. The ecosystem has blossomed tremendously already;
just take a look at the &lt;a href=&quot;https://packagist.org/search/?search_query%5Bquery%5D=psr-7&quot;&gt;PSR-7 packages on Packagist&lt;/a&gt;!
Chances are, if you need to accomplish something via middleware, somebody has
already written it; if they haven’t you can likely write it in a handful of
lines of code.&lt;/p&gt;

&lt;p&gt;Expressive started out with me remarking off-handedly that I’d like to create a
project that is to &lt;a href=&quot;https://github.com/zendframework/zend-stratigility&quot;&gt;Stratigility&lt;/a&gt;
(the ZF PSR-7 middleware foundation) what &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; is to
&lt;a href=&quot;https://github.com/senchalabs/connect&quot;&gt;Connect&lt;/a&gt; — in other words, a
microframework providing the most often-desired features when writing web
applications and APIs, but no more. What I saw with Connect and Express was that
developers were able to write single-purpose middleware, share it, and layer
middleware to create complex applications. The features Express layered on top
of Connect simplified the most common problems of routing middleware, while
Connect provided a robust, simple runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zimuel.it&quot;&gt;Enrico&lt;/a&gt; was particularly excited about the concept, and
got the ball rolling last summer, and it’s been a whirlwind of activity ever
since. And then others started playing with the code, and contributing ideas,
validating the approach, and suggesting new directions. We now have a
microframework in place that rivals zend-mvc in flexibility, while retaining our
core principals of simplicity and minimalism.&lt;/p&gt;

&lt;p&gt;How do I know the approach works?  This site &lt;a href=&quot;https://github.com/weierophinney/mwop.net/blob/8a54313874706b4abd7e1a3082433ab495cabbeb/composer.json#L30&quot;&gt;runs on Expressive already&lt;/a&gt;.
And many of our users and contributors are already running on it. But the best
validation I’ve read was from one of our prolific Zend Framework contributors,
&lt;a href=&quot;http://www.michaelgallego.fr/&quot;&gt;Michaël Gallego&lt;/a&gt;, on a recent thread:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For me the only reason to use Zend\Mvc (and, therefore, the eco-system around
it) is the facilities provided by the module eco-systems. But even in that
case, I’ve found out that for that, the middleware philosophy makes it so much
easier. You no longer need to install Zend\Authentication that would try to
map into the mvc, spending a lot of time how it works… Want an
authentication? Just analyze your need, and boom, ten lines letter, it’s done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That sort of comment and realization was exactly what I experienced working in
node.js almost two years ago. And now, today, it’s a reality in PHP.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 00:00:00 -0400</pubDate>
        <link>http://julien.guittard.io/blog/expressive-1-0-in-the-wild.html</link>
        <guid isPermaLink="true">http://julien.guittard.io/blog/expressive-1-0-in-the-wild.html</guid>
        
        <category>http</category>
        
        <category>middleware</category>
        
        <category>php</category>
        
        <category>programming</category>
        
        <category>psr-7</category>
        
        
        <category>news</category>
        
      </item>
    
  </channel>
</rss>
